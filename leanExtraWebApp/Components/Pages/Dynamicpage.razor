@page "/server/{id:int}"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IServersEFCoreRepository ServersEFCoreRepository

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"
ConfirmExternalNavigation="true"
></NavigationLock>
<br>
@if (server is not null)
{

   <EditForm Model="server" FormName="formServer" OnvalidSubmit="submit">
      <DataAnnotationsValidator></DataAnnotationsValidator>
      <ValidationSummary></ValidationSummary>
      <InputNumber @bind-Value="server.ServerId" hidden></InputNumber>
      <div class="row mb-3">
         <div class="col-2">
            <label class="col-form-label">Name</label>
         </div>
         <div class="col-6">
            <InputText @bind-Value="server.Name" class="form-control"></InputText>
         </div>
         <div class="col">
            <ValidationMessage For="()=>server.Name"></ValidationMessage>
         </div>
      </div>

      <div class="row mb-3">
         <div class="col-2">
            <label class="col-form-label">Name</label>
         </div>
         <div class="col-6">
            <InputText @bind-Value="server.City" class="form-control"></InputText>
         </div>
      </div>

      <div class="row mb-3">
         <div class="col-2">
            <label class="col-form-label">Available</label>
         </div>
         <div class="col-6">
            <InputCheckbox @bind-Value="server.IsOnline" class="form-check-input"></InputCheckbox>
         </div>
      </div>
      <br>
      <button class="btn btn-primary" type="submit">Update</button>
      <a href=" /server" class="btn btn-primary">close</a>

   </EditForm>



}
<br>


@code
{
   [Parameter]
   public int id { get; set; }
   [SupplyParameterFromForm(FormName = "formServer")]
   private Server? server { get; set; }
   protected override void OnParametersSet()
   {
      server ??= ServersEFCoreRepository.GetSetById(this.id);
   }
   private void submit()
   {
      if (server is not null)
      {
         ServersEFCoreRepository.UpdateServer(server.ServerId, server);
      }
      NavigationManager.NavigateTo("/server");


   }
   public async Task OnBeforeInternalNavigation(LocationChangingContext context)
   {
      var is_confirm =await JSRuntime.InvokeAsync<bool>("confirm","Are you sure do you want to leave");
         if(!is_confirm)
         {
            context.PreventNavigation();
         }
   }
  
}